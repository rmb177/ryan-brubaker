// Generated by CoffeeScript 1.3.1
(function() {
  var ball, clearCanvas, context, drawBall, frameTimer, gameOver, init, kDownArrow, kSKey, kUpArrow, kWKey, leftPaddle, leftScore, movingLeftPaddleDown, movingLeftPaddleUp, movingRightPaddleDown, movingRightPaddleUp, nextFrame, rightPaddle, rightScore, setInitialPositions, updateScoreDisplay;

  context = null;

  kUpArrow = 38;

  kDownArrow = 40;

  kWKey = 87;

  kSKey = 83;

  leftScore = 0;

  rightScore = 0;

  movingLeftPaddleUp = false;

  movingLeftPaddleDown = false;

  movingRightPaddleUp = false;

  movingRightPaddleDown = false;

  ball = {};

  leftPaddle = {};

  rightPaddle = {};

  frameTimer = null;

  gameOver = false;

  clearCanvas = function() {
    return context.clearRect(0, 0, context.canvas.width, context.canvas.height);
  };

  drawBall = function() {
    context.beginPath();
    context.moveTo(ball.posX, ball.posY);
    context.arc(ball.posX, ball.posY, 20, 0, Math.PI * 2, false);
    context.closePath();
    context.fill();
    return context.stroke();
  };

  updateScoreDisplay = function() {
    var scoreContext;
    scoreContext = document.getElementById("score").getContext('2d');
    scoreContext.clearRect(0, 0, scoreContext.canvas.width, scoreContext.canvas.height);
    scoreContext.font = "bold 48px sans-serif";
    scoreContext.fillText(leftScore, 10, 40);
    return scoreContext.fillText(rightScore, 925, 40);
  };

  nextFrame = function() {
    var _ref, _ref1, _ref2, _ref3;
    clearCanvas();
    ball.posX = ball.posX + ball.velocityX;
    ball.posY = ball.posY + ball.velocityY;
    drawBall();
    gameOver = false;
    if (((leftPaddle.posX <= (_ref = ball.posX) && _ref <= (leftPaddle.posX + leftPaddle.width))) && ((leftPaddle.posY <= (_ref1 = ball.posY) && _ref1 <= (leftPaddle.posY + leftPaddle.height))) && ball.velocityX < 0) {
      ball.velocityX = -ball.velocityX;
    }
    if (((rightPaddle.posX <= (_ref2 = ball.posX) && _ref2 <= (rightPaddle.posX + rightPaddle.width))) && ((rightPaddle.posY <= (_ref3 = ball.posY) && _ref3 <= (rightPaddle.posY + rightPaddle.height))) && ball.velocityX > 0) {
      ball.velocityX = -ball.velocityX;
    }
    if (ball.posX < -1 && ball.velocityX < 0) {
      gameOver = true;
      rightScore += 1;
      updateScoreDisplay();
    } else if (ball.posX > 1000 && ball.velocityX > 0) {
      gameOver = true;
      leftScore += 1;
      updateScoreDisplay();
    }
    if ((ball.posY < -1 && ball.velocityY < 0) || (ball.posY > 450 && ball.velocityY > 0)) {
      ball.velocityY = -ball.velocityY;
    }
    if (movingLeftPaddleUp && leftPaddle.posY > 0) {
      leftPaddle.posY -= 5;
    }
    if (movingLeftPaddleDown && leftPaddle.posY < 350) {
      leftPaddle.posY += 5;
    }
    if (movingRightPaddleUp && rightPaddle.posY > 0) {
      rightPaddle.posY -= 5;
    }
    if (movingRightPaddleDown && rightPaddle.posY < 350) {
      rightPaddle.posY += 5;
    }
    context.fillRect(leftPaddle.posX, leftPaddle.posY, leftPaddle.width, leftPaddle.height);
    context.fillRect(rightPaddle.posX, rightPaddle.posY, rightPaddle.width, rightPaddle.height);
    if (!gameOver) {
      return frameTimer = setTimeout(nextFrame, 10);
    }
  };

  setInitialPositions = function() {
    ball = {
      velocityX: (Math.random() * 3 + 3) * (Math.random() > 0.5 ? 1 : -1),
      velocityY: (Math.random() * 3 + 3) * (Math.random() > 0.5 ? 1 : -1),
      posX: 450,
      posY: 225
    };
    leftPaddle = {
      posX: 25,
      posY: 175,
      width: 25,
      height: 100
    };
    return rightPaddle = {
      posX: 925,
      posY: 175,
      width: 25,
      height: 100
    };
  };

  init = function() {
    setInitialPositions();
    updateScoreDisplay();
    context = document.getElementById("bounds").getContext('2d');
    frameTimer = setTimeout(nextFrame, 10);
    $(document).on('keydown', function(event) {
      var _ref, _ref1, _ref2, _ref3;
      switch (event.keyCode) {
        case kWKey:
          _ref = [true, false], movingLeftPaddleUp = _ref[0], movingLeftPaddleDown = _ref[1];
          break;
        case kSKey:
          _ref1 = [false, true], movingLeftPaddleUp = _ref1[0], movingLeftPaddleDown = _ref1[1];
          break;
        case kUpArrow:
          _ref2 = [true, false], movingRightPaddleUp = _ref2[0], movingRightPaddleDown = _ref2[1];
          break;
        case kDownArrow:
          _ref3 = [false, true], movingRightPaddleUp = _ref3[0], movingRightPaddleDown = _ref3[1];
      }
      return false;
    });
    $(document).on('keyup', function(event) {
      var _ref, _ref1, _ref2, _ref3;
      switch (event.keyCode) {
        case kWKey:
          _ref = [false, false], movingLeftPaddleUp = _ref[0], movingLeftPaddleDown = _ref[1];
          break;
        case kSKey:
          _ref1 = [false, false], movingLeftPaddleUp = _ref1[0], movingLeftPaddleDown = _ref1[1];
          break;
        case kUpArrow:
          _ref2 = [false, false], movingRightPaddleUp = _ref2[0], movingRightPaddleDown = _ref2[1];
          break;
        case kDownArrow:
          _ref3 = [false, false], movingRightPaddleUp = _ref3[0], movingRightPaddleDown = _ref3[1];
      }
      return true;
    });
    return $(function() {
      return $('#playAgainBtn').on('click', function() {
        gameOver = false;
        setInitialPositions();
        return frameTimer = setTimeout(nextFrame, 10);
      });
    });
  };

  $(document).ready(init);

}).call(this);
