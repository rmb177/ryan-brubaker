// Generated by CoffeeScript 1.3.1
(function() {
  var BALL_RADIUS, DOWN_ARROW, S_KEY, UP_ARROW, W_KEY, ball, checkForEndGame, checkForPaddleCollision, context, gameOver, init, lastTime, leftPaddle, leftScore, mainLoop, movingLeftPaddleDown, movingLeftPaddleUp, movingRightPaddleDown, movingRightPaddleUp, render, rightPaddle, rightScore, setInitialPositions, update, updateScoreDisplay, util;

  UP_ARROW = 38;

  DOWN_ARROW = 40;

  W_KEY = 87;

  S_KEY = 83;

  BALL_RADIUS = 20;

  context = null;

  util = new Collision.Util;

  leftScore = 0;

  rightScore = 0;

  movingLeftPaddleUp = false;

  movingLeftPaddleDown = false;

  movingRightPaddleUp = false;

  movingRightPaddleDown = false;

  ball = {};

  leftPaddle = {};

  rightPaddle = {};

  gameOver = false;

  lastTime = 0;

  updateScoreDisplay = function() {
    var scoreContext;
    scoreContext = document.getElementById("score").getContext('2d');
    scoreContext.clearRect(0, 0, scoreContext.canvas.width, scoreContext.canvas.height);
    scoreContext.font = "bold 48px sans-serif";
    scoreContext.fillText(leftScore, 10, 40);
    return scoreContext.fillText(rightScore, 925, 40);
  };

  checkForPaddleCollision = function() {
    var _ref, _ref1, _ref2, _ref3;
    if (((leftPaddle.posX <= (_ref = ball.posX) && _ref <= (leftPaddle.posX + leftPaddle.width))) && ((leftPaddle.posY <= (_ref1 = ball.posY) && _ref1 <= (leftPaddle.posY + leftPaddle.height))) && ball.velocityX < 0) {
      ball.velocityX = -ball.velocityX;
    }
    if (((rightPaddle.posX <= (_ref2 = ball.posX) && _ref2 <= (rightPaddle.posX + rightPaddle.width))) && ((rightPaddle.posY <= (_ref3 = ball.posY) && _ref3 <= (rightPaddle.posY + rightPaddle.height))) && ball.velocityX > 0) {
      return ball.velocityX = -ball.velocityX;
    }
  };

  checkForEndGame = function() {
    if (ball.posX < -1 && ball.velocityX < 0) {
      gameOver = true;
      return rightScore += 1;
    } else if (ball.posX > 1000 && ball.velocityX > 0) {
      gameOver = true;
      return leftScore += 1;
    }
  };

  update = function(delta) {
    ball.posX = ball.posX + ball.velocityX * delta;
    ball.posY = ball.posY + ball.velocityY * delta;
    if ((ball.posY < -1 && ball.velocityY < 0) || (ball.posY > 450 && ball.velocityY > 0)) {
      ball.velocityY = -ball.velocityY;
    }
    if (movingLeftPaddleUp && leftPaddle.posY > 0) {
      leftPaddle.posY -= 300 * delta;
    }
    if (movingLeftPaddleDown && leftPaddle.posY < 350) {
      leftPaddle.posY += 300 * delta;
    }
    if (movingRightPaddleUp && rightPaddle.posY > 0) {
      rightPaddle.posY -= 300 * delta;
    }
    if (movingRightPaddleDown && rightPaddle.posY < 350) {
      rightPaddle.posY += 300 * delta;
    }
    checkForPaddleCollision();
    return checkForEndGame();
  };

  render = function() {
    util.clearCanvas();
    updateScoreDisplay();
    util.drawBall(ball, BALL_RADIUS);
    context.fillRect(leftPaddle.posX, leftPaddle.posY, leftPaddle.width, leftPaddle.height);
    return context.fillRect(rightPaddle.posX, rightPaddle.posY, rightPaddle.width, rightPaddle.height);
  };

  setInitialPositions = function() {
    ball = {
      velocityX: (Math.random() * 3 + 5) * (Math.random() > 0.5 ? 1 : -1) * 60,
      velocityY: (Math.random() * 3 + 5) * (Math.random() > 0.5 ? 1 : -1) * 60,
      posX: 450,
      posY: 225
    };
    leftPaddle = {
      posX: 25,
      posY: 175,
      width: 25,
      height: 100
    };
    return rightPaddle = {
      posX: 925,
      posY: 175,
      width: 25,
      height: 100
    };
  };

  mainLoop = function() {
    var delta, now;
    now = Date.now();
    delta = (now - lastTime) / 1000;
    update(delta);
    render();
    lastTime = now;
    if (!gameOver) {
      return window.requestAnimationFrame(mainLoop);
    }
  };

  init = function() {
    setInitialPositions();
    updateScoreDisplay();
    context = document.getElementById("bounds").getContext('2d');
    $(document).on('keydown', function(event) {
      var _ref, _ref1, _ref2, _ref3;
      switch (event.keyCode) {
        case W_KEY:
          _ref = [true, false], movingLeftPaddleUp = _ref[0], movingLeftPaddleDown = _ref[1];
          break;
        case S_KEY:
          _ref1 = [false, true], movingLeftPaddleUp = _ref1[0], movingLeftPaddleDown = _ref1[1];
          break;
        case UP_ARROW:
          _ref2 = [true, false], movingRightPaddleUp = _ref2[0], movingRightPaddleDown = _ref2[1];
          break;
        case DOWN_ARROW:
          _ref3 = [false, true], movingRightPaddleUp = _ref3[0], movingRightPaddleDown = _ref3[1];
      }
      return false;
    });
    $(document).on('keyup', function(event) {
      var _ref, _ref1, _ref2, _ref3;
      switch (event.keyCode) {
        case W_KEY:
          _ref = [false, false], movingLeftPaddleUp = _ref[0], movingLeftPaddleDown = _ref[1];
          break;
        case S_KEY:
          _ref1 = [false, false], movingLeftPaddleUp = _ref1[0], movingLeftPaddleDown = _ref1[1];
          break;
        case UP_ARROW:
          _ref2 = [false, false], movingRightPaddleUp = _ref2[0], movingRightPaddleDown = _ref2[1];
          break;
        case DOWN_ARROW:
          _ref3 = [false, false], movingRightPaddleUp = _ref3[0], movingRightPaddleDown = _ref3[1];
      }
      return true;
    });
    $('#playAgainBtn').on('click', function() {
      gameOver = false;
      setInitialPositions();
      lastTime = Date.now();
      return mainLoop();
    });
    lastTime = Date.now();
    return mainLoop();
  };

  $(document).ready(init);

}).call(this);
